package auto

import (
	"strings"

	"github.com/mkamadeus/cipher/common/stringutils"
)

func Encrypt(plain string, key string) string {
	result := []rune{}
	i := 0
	initialKeyLen := len(key)
	autoGeneratedKey := []rune{}
	key = strings.ReplaceAll(key, " ", "")
	for _, char := range plain {
		var keyEvaluated byte
		if i >= len(key) {
			keyEvaluated = byte(autoGeneratedKey[i-initialKeyLen])
		} else {
			keyEvaluated = key[i]
		}
		keyBase := stringutils.GetCharBase(rune(keyEvaluated))
		charBase := stringutils.GetCharBase(char)
		var toBeAppended rune
		// Ignore non alphabet and ignore space
		if charBase != -1 {
			autoGeneratedKey = append(autoGeneratedKey, char)
			toBeAppended = rune((((int(char) - charBase) + (int(keyEvaluated) - keyBase)) % 26) + charBase)
			result = append(result, toBeAppended)
			i++
		}
	}

	return string(result)
}
